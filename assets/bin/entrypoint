#!/bin/bash

source ~/.baids/baids
if [ ! -z "${DEBUG}" ]
then
  set -x
fi

# bootstrap the node
if [ ! -e "${DATA_DIR}/block-0.bin" ]
then
  cd $DATA_DIR
  test -e config.yaml && mv config.yaml config.yaml_BOOTSTRAP_BACKUP
  bash /src/scripts/bootstrap
  test -e config.yaml_BOOTSTRAP_BACKUP && mv config.yaml_BOOTSTRAP_BACKUP config.yaml
fi

if [ "${PUBLIC_ID}" == "disabled" ]
then
  sed -i '/public_id:.*/d' ${DATA_DIR}/config.yaml
else
  if [ ! -z "${PUBLIC_ID}" ]
  then
    sed -i '/.* public_id:.*/d' ${DATA_DIR}/config.yaml
    sed -i "s|^p2p:|p2p:\n  public_id: \"${PUBLIC_ID}\"|" ${DATA_DIR}/config.yaml
  else
    grep -q '.* public_id:' ${DATA_DIR}/config.yaml
    if [ $? -ne 0 ]
    then
      PUBLIC_ID=$(head -n10 /dev/urandom | xxd -l 24 -ps)
      sed -i "s|^p2p:|p2p:\n  public_id: \"${PUBLIC_ID}\"|" ${DATA_DIR}/config.yaml
    fi
  fi
fi

if [ "${PUBLIC_ADDRESS}" == "disabled" ]
then
  sed -i '/public_address:.*/d' ${DATA_DIR}/config.yaml
else
  # if no public address was provided, try to guess it
  if [ -z "${PUBLIC_ADDRESS}" ]
  then
   PUBLIC_ADDRESS=$(curl ifconfig.co)
  else
    # if set to internal, try to get eth0's ip
    if [ "${PUBLIC_ADDRESS}" == "internal" ]
    then
      PUBLIC_ADDRESS=$(ip -o -4 addr show dev eth0 | awk '{print $4}' | awk -F/ '{print $1}')
    fi
  fi
  sed -i "s|public_address: \"/\(.*\)/\(.*\)/\(.*\)/\(.*\)\"|public_address: \"/\1/${PUBLIC_ADDRESS}/\3/${PUBLIC_PORT}\"|g" ${DATA_DIR}/config.yaml
fi

# make the p2p listen on any IP
parse_yaml ${DATA_DIR}/config.yaml | grep -q p2p_listen_address.*0.0.0.0.*
if [ $? -ne 0 ]
then
  sed -i 's|p2p:|p2p:\n  listen_address: "/ip4/0.0.0.0/tcp/8299"|' ${DATA_DIR}/config.yaml
fi
# do the same for the REST api so we can access from outside the container
parse_yaml ${DATA_DIR}/config.yaml | grep -q rest_listen_address.*0.0.0.0.*
if [ $? -ne 0 ]
then
  sed -i 's|listen:.*|listen: "0.0.0.0:8443"|' ${DATA_DIR}/config.yaml
fi

# if a trusted peer is provided, override config.yaml's ones
if [[ ! -z "${TRUSTED_PEER_ADDRESS}" ]] && [[ ! -z "${TRUSTED_PEER_ID}" ]]
then
  TRUSTED_PEER_HOST=$(echo $TRUSTED_PEER_ADDRESS | awk -F/ '{print $3}')
  TRUSTED_PEER_ADDRESS=$(echo $TRUSTED_PEER_ADDRESS | sed "s|${TRUSTED_PEER_HOST}|$(getent hosts $TRUSTED_PEER_HOST | awk '{print $1}')|g")

  # clean up trusted_peers
  sed -i '/trusted_peers:/,/\$/{{/.*\(#\|- address:\| id: \).*/d;};}' ${DATA_DIR}/config.yaml
  sed -i 's/trusted_peers: \[\]/trusted_peers:/' ${DATA_DIR}/config.yaml
  sed -i "s|trusted_peers:|trusted_peers:\n    - address: ${TRUSTED_PEER_ADDRESS}\n      id: ${TRUSTED_PEER_ID}|" ${DATA_DIR}/config.yaml
fi

if [ ! -z "${JORMUNGANDR_ARGS}" ]
then
  # specify default config file if none was provided
  CONFIG_ARG=$(echo ${JORMUNGANDR_ARGS} | grep -q -- --config || echo -- --config ${DATA_DIR}/config.yaml)
  jormungandr ${JORMUNGANDR_ARGS} \
    ${CONFIG_ARG}
else
  if [ ! -z "${JORMUNGANDR_BLOCK0_HASH}" ]
  then
    jormungandr ${JORMUNGANDR_EXTRA_ARGS} \
      --genesis-block-hash ${JORMUNGANDR_BLOCK0_HASH} \
      --config ${DATA_DIR}/config.yaml \
      --secret ${DATA_DIR}/pool-secret1.yaml
  else
    jormungandr ${JORMUNGANDR_EXTRA_ARGS} \
      --genesis-block ${DATA_DIR}/block-0.bin \
      --config ${DATA_DIR}/config.yaml \
      --secret ${DATA_DIR}/pool-secret1.yaml
  fi
fi
